services:
  event-collector:
    build:
      context: ${PWD}/../EventCollector
      dockerfile: ${PWD}/../EventCollector/Dockerfile
    restart: always
    ports:
      - "8080:80"
    environment:
      APP_ENV: docker
      APP_CONF_PATH: "/app/"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - events-network
#      GIN_MODE: "release"
  profile-monitor:
    build:
      context: ${PWD}/../ProfileMonitor
      dockerfile: ${PWD}/../ProfileMonitor/Dockerfile
    restart: always
    ports:
      - "8081:80"
    environment:
      APP_ENV: docker
      APP_CONF_PATH: "/app/"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - profile-service


#  redis:
#    image: redis:latest
#    container_name: redis_container
#    environment:
#      - REDIS_PASSWORD=${REDIS_PASSWORD}
#      - REDIS_PORT=6379
#      - REDIS_DATABASES=16
#    ports:
#      - "6379:6379"
#    volumes:
#      - ${PWD}/fs/volumes/redis/data/:/data
#      - ${PWD}/fs/volumes/redis/etc/:/usr/local/etc/redis
#    healthcheck:
#      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    networks:
#      - eventCollector

  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    user: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - profile-data:/var/lib/postgresql/data
      - ${PWD}/fs/postgres/init:/docker-entrypoint-initdb.d/
    networks:
      - profile-service

  flyway-profile-storage:
    image: flyway/flyway:latest
    entrypoint: > 
      sh -c "flyway -url=jdbc:postgresql://postgres:5432/profile_storage -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} migrate"
    volumes:
      - ${PWD}/fs/postgres/profile_storage:/flyway/sql
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - profile-service

  flyway-package-storage:
    image: flyway/flyway:latest
    entrypoint: >
      sh -c "flyway -url=jdbc:postgresql://postgres:5432/package_storage -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} migrate"
    volumes:
      - ${PWD}/fs/postgres/package_storage:/flyway/sql
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - profile-service

  # region pinot
  pinot-zookeeper:
    image: ${ZK_IMAGE:-zookeeper:3.9.2}
    container_name: "pinot-zookeeper"
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - events-network
    healthcheck:
      test: [ "CMD", "zkServer.sh", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka:
    image: ${KAFKA_IMAGE:-bitnami/kafka:3.6}
    container_name: "kafka"
    restart: unless-stopped
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: pinot-zookeeper:2181/kafka
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENER_NAME: INSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_BROKER_ID: 0
      KAFKA_CREATE_TOPICS: event-collector.events:3:1,profile-indexer.active-profiles:3:1
    depends_on:
      pinot-zookeeper:
        condition: service_healthy
    networks:
      - events-network
      - profile-service
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh -bootstrap-server kafka:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      replicas: ${KAFKA_REPLICAS:-1}  # Default to 0, meaning Kafka won't start unless KAFKA_REPLICAS is set

  pinot-controller:
    image: ${PINOT_IMAGE:-apachepinot/pinot:1.2.0}
    command: "StartController -zkAddress pinot-zookeeper:2181"
    container_name: "pinot-controller"
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-controller.log"
    depends_on:
      pinot-zookeeper:
        condition: service_healthy
    networks:
      - events-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pinot-broker:
    image: ${PINOT_IMAGE:-apachepinot/pinot:1.2.0}
    command: "StartBroker -zkAddress pinot-zookeeper:2181"
    container_name: "pinot-broker"
    restart: unless-stopped
    ports:
      - "8099:8099"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-broker.log"
    depends_on:
      pinot-controller:
        condition: service_healthy
    networks:
      - events-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8099/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pinot-server:
    image: ${PINOT_IMAGE:-apachepinot/pinot:1.2.0}
    command: "StartServer -zkAddress pinot-zookeeper:2181"
    container_name: "pinot-server"
    restart: unless-stopped
    ports:
      - "8098:8098"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx16G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-server.log"
    depends_on:
      pinot-broker:
        condition: service_healthy
    networks:
      - events-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8097/health/readiness || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
  pinot-up:
    image: curlimages/curl:latest
    container_name: pinot-up
    entrypoint: >
      /bin/sh -c "
        echo 'Creating schema...';
        curl -X POST -H 'Content-Type: application/json' -d @/tmp/schema.json http://pinot-controller:9000/schemas &&
        echo 'Creating table...';
        curl -X POST -H 'Content-Type: application/json' -d @/tmp/table_config.json http://pinot-controller:9000/tables"
    volumes:
      - ./fs/pinot/event-schema.json:/tmp/schema.json
      - ./fs/pinot/events-table.json:/tmp/table_config.json
    networks:
      - events-network
    restart: "no"
    depends_on:
      pinot-controller:
        condition: service_healthy
    environment:
      JAVA_OPTS: "-Xms1G -Xmx2G"

networks:
  druid:
    driver: bridge
  eventCollector:
    driver: bridge
  events-network:
    name: events-network
    driver: bridge
  profile-service:
    driver: bridge

volumes:
  profile-data: