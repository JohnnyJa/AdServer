// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: getProfileState.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileStateService_GetProfileState_FullMethodName = "/pb.ProfileStateService/GetProfileState"
)

// ProfileStateServiceClient is the client API for ProfileStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileStateServiceClient interface {
	GetProfileState(ctx context.Context, in *GetProfileStateRequest, opts ...grpc.CallOption) (*GetProfileStateResponse, error)
}

type profileStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileStateServiceClient(cc grpc.ClientConnInterface) ProfileStateServiceClient {
	return &profileStateServiceClient{cc}
}

func (c *profileStateServiceClient) GetProfileState(ctx context.Context, in *GetProfileStateRequest, opts ...grpc.CallOption) (*GetProfileStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileStateResponse)
	err := c.cc.Invoke(ctx, ProfileStateService_GetProfileState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileStateServiceServer is the server API for ProfileStateService service.
// All implementations must embed UnimplementedProfileStateServiceServer
// for forward compatibility.
type ProfileStateServiceServer interface {
	GetProfileState(context.Context, *GetProfileStateRequest) (*GetProfileStateResponse, error)
	mustEmbedUnimplementedProfileStateServiceServer()
}

// UnimplementedProfileStateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileStateServiceServer struct{}

func (UnimplementedProfileStateServiceServer) GetProfileState(context.Context, *GetProfileStateRequest) (*GetProfileStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileState not implemented")
}
func (UnimplementedProfileStateServiceServer) mustEmbedUnimplementedProfileStateServiceServer() {}
func (UnimplementedProfileStateServiceServer) testEmbeddedByValue()                             {}

// UnsafeProfileStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileStateServiceServer will
// result in compilation errors.
type UnsafeProfileStateServiceServer interface {
	mustEmbedUnimplementedProfileStateServiceServer()
}

func RegisterProfileStateServiceServer(s grpc.ServiceRegistrar, srv ProfileStateServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfileStateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileStateService_ServiceDesc, srv)
}

func _ProfileStateService_GetProfileState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStateServiceServer).GetProfileState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStateService_GetProfileState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStateServiceServer).GetProfileState(ctx, req.(*GetProfileStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileStateService_ServiceDesc is the grpc.ServiceDesc for ProfileStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProfileStateService",
	HandlerType: (*ProfileStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfileState",
			Handler:    _ProfileStateService_GetProfileState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getProfileState.proto",
}
